data:application/octet-stream;base64,import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class SecretKeyFinder {
    public static void main(String[] args) {
        JSONParser parser = new JSONParser();
        
        try {
            JSONObject jsonObject = (JSONObject) parser.parse(new FileReader("testcase1_new.json"));
            JSONObject keys = (JSONObject) jsonObject.get("keys");
            int n = ((Long) keys.get("n")).intValue();
            int k = ((Long) keys.get("k")).intValue();
            
            List<Point> decryptedPoints = new ArrayList<>();
            for (Object key : jsonObject.keySet()) {
                if (!"keys".equals(key)) {
                    int x = Integer.parseInt((String) key);
                    JSONObject operations = (JSONObject) jsonObject.get(key);
                    Point point = decryptPoint(x, operations);
                    if (point != null) {
                        decryptedPoints.add(point);
                    }
                }
            }
            
            List<Point> validPoints = validatePoints(decryptedPoints);
            
            if (validPoints.size() >= k) {
                Map<Double, List<Point>> frequencyMap = new HashMap<>();
                for (Point point : validPoints) {
                    double constant = lagrangeConstant(validPoints, point.x);
                    frequencyMap.putIfAbsent(constant, new ArrayList<>());
                    frequencyMap.get(constant).add(point);
                }
                
                double mostFrequentC = findMostFrequentC(frequencyMap);
                List<Point> correspondingPoints = frequencyMap.get(mostFrequentC);
                
                System.out.println("Most Frequent Constant Value (c): " + mostFrequentC);
                System.out.println("Corresponding Points:");
                for (Point p : correspondingPoints) {
                    System.out.println("(" + p.x + ", " + p.y + ")");
                }
            } else {
                System.out.println("Not enough valid points to reconstruct the secret key.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static Point decryptPoint(int x, JSONObject operations) {
        for (Object op : operations.keySet()) {
            String operation = (String) op;
            JSONArray values = (JSONArray) operations.get(op);
            
            int y = 0;
            switch (operation) {
                case "LCM":
                    y = lcm(values);
                    break;
                case "HCF":
                    y = hcf(values);
                    break;
                case "SUM":
                    y = sum(values);
                    break;
                case "MUL":
                    y = multiply(values);
                    break;
                case "DIV":
                    y = divide(values);
                    break;
                case "SUB":
                    y = subtract(values);
                    break;
                default:
                    return null; // Unknown operation
            }
            return new Point(x, y);
        }
        return null;
    }
    
    public static int lcm(JSONArray values) {
        int result = 1;
        for (Object value : values) {
            result = lcm(result, ((Long) value).intValue());
        }
        return result;
    }
    
    public static int hcf(JSONArray values) {
        int result = ((Long) values.get(0)).intValue();
        for (Object value : values) {
            result = gcd(result, ((Long) value).intValue());
        }
        return result;
    }
    
    public static int sum(JSONArray values) {
        int result = 0;
        for (Object value : values) {
            result += ((Long) value).intValue();
        }
        return result;
    }
    
    public static int multiply(JSONArray values) {
        int result = 1;
        for (Object value : values) {
            result *= ((Long) value).intValue();
        }
        return result;
    }
    
    public static int divide(JSONArray values) {
        int result = ((Long) values.get(0)).intValue();
        for (int i = 1; i < values.size(); i++) {
            result /= ((Long) values.get(i)).intValue();
        }
        return result;
    }
    
    public static int subtract(JSONArray values) {
        int result = ((Long) values.get(0)).intValue();
        for (int i = 1; i < values.size(); i++) {
            result -= ((Long) values.get(i)).intValue();
        }
        return result;
    }
    
    public static int lcm(int a, int b) {
        return a * (b / gcd(a, b));
    }
    
    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
    
    public static List<Point> validatePoints(List<Point> points) {
        // Implement validation logic to identify and remove incorrect points
        // For simplicity, this implementation assumes all points are valid
        return points;
    }
    
    public static double lagrangeConstant(List<Point> points, int x) {
        double constant = 0;
        for (int i = 0; i < points.size(); i++) {
            double term = points.get(i).y;
            for (int j = 0; j < points.size(); j++) {
                if (i != j) {
                    term *= (double) (x - points.get(j).x) / (points.get(i).x - points.get(j).x);
                }
            }
            constant += term;
        }
        return constant;
    }
    
    public static double findMostFrequentC(Map<Double, List<Point>> frequencyMap) {
        double mostFrequentC = 0;
        int maxFrequency = 0;
        for (Map.Entry<Double, List<Point>> entry : frequencyMap.entrySet()) {
            if (entry.getValue().size() > maxFrequency) {
                maxFrequency = entry.getValue().size();
                mostFrequentC = entry.getKey();
            }
        }
        return mostFrequentC;
    }
}

class Point {
    int x;
    int y;
    
    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
    
    // Getters and setters if needed
}
